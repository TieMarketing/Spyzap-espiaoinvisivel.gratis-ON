$(document).ready(function () {
    // ===== IN√çCIO - GERENCIAMENTO DE UTMs CORRIGIDO =====

    // Fun√ß√£o centralizada para capturar e salvar UTMs
    function captureAndSaveUTMs() {
        const urlParams = new URLSearchParams(window.location.search);
        const utmParams = {};

        // Lista de par√¢metros UTM para capturar
        const paramsToCapture = [
            'utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content',
            'src', 'gclid', 'wbraid', 'gbraid', 'keyword', 'device', 'network'
        ];

        paramsToCapture.forEach(param => {
            if (urlParams.has(param)) {
                utmParams[param] = urlParams.get(param);
            }
        });

        // Salvar no localStorage se houver par√¢metros
        if (Object.keys(utmParams).length > 0) {
            localStorage.setItem('utmParams', JSON.stringify(utmParams));
            console.log('‚úÖ UTMs capturados e salvos:', utmParams);
        } else {
            console.log('‚ÑπÔ∏è Nenhum UTM encontrado na URL atual');
        }
    }

    // Fun√ß√£o CORRIGIDA para obter UTMs (prioriza URL atual, usa localStorage como fallback)
    function getUTMParams() {
        const urlParams = new URLSearchParams(window.location.search);
        const utmParams = {};
        const paramsToCapture = [
            'utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content',
            'src', 'gclid', 'wbraid', 'gbraid', 'keyword', 'device', 'network'
        ];

        // Primeiro, tenta capturar da URL atual
        paramsToCapture.forEach(param => {
            if (urlParams.has(param)) {
                utmParams[param] = urlParams.get(param);
            }
        });

        // Se n√£o encontrou UTMs na URL atual, usa o localStorage como fallback
        if (Object.keys(utmParams).length === 0) {
            const storedUtms = localStorage.getItem('utmParams');
            if (storedUtms) {
                try {
                    const parsedUtms = JSON.parse(storedUtms);
                    Object.assign(utmParams, parsedUtms);
                    console.log('‚úÖ UTMs recuperados do localStorage:', utmParams);
                } catch (e) {
                    console.error('‚ùå Erro ao parsear UTMs do localStorage:', e);
                }
            } else {
                console.log('‚ö†Ô∏è Nenhum UTM encontrado no localStorage');
            }
        } else {
            console.log('‚úÖ UTMs encontrados na URL atual:', utmParams);
        }

        return utmParams;
    }

    // Fun√ß√£o UNIFICADA para construir URL com UTMs
    function buildUrlWithUTMs(baseUrl) {
        const utmParams = getUTMParams();

        if (Object.keys(utmParams).length === 0) {
            console.log('‚ö†Ô∏è Nenhum UTM encontrado para adicionar √† URL:', baseUrl);
            return baseUrl;
        }

        const utmString = Object.keys(utmParams)
            .map(key => `${key}=${encodeURIComponent(utmParams[key])}`)
            .join('&');

        const separator = baseUrl.includes('?') ? '&' : '?';
        const finalUrl = `${baseUrl}${separator}${utmString}`;
        
        console.log('üîó URL constru√≠da:', baseUrl, '‚Üí', finalUrl);
        return finalUrl;
    }

    // Capturar UTMs na inicializa√ß√£o
    captureAndSaveUTMs();

    // ===== TRATAMENTO ESPEC√çFICO PARA BOT√ïES DA SE√á√ÉO NotImg =====
    
    // Fun√ß√£o para aplicar UTMs nos bot√µes da se√ß√£o NotImg
    function applyUTMsToNotImgButtons() {
        console.log('üîß Aplicando UTMs nos bot√µes da se√ß√£o NotImg');
        
        $('.NotImg a[href]').each(function() {
            const $link = $(this);
            const originalHref = $link.attr('href');
            
            if (originalHref && !$link.data('utm-processed')) {
                // M√∫ltiplas op√ß√µes de URL para cada bot√£o
                let possibleUrls = [];
                
                if (originalHref.includes('marido')) {
                    possibleUrls = [
                        './marido/',
                        './marido/index.html',
                        'marido/',
                        'marido/index.html'
                    ];
                } else if (originalHref.includes('esposa')) {
                    possibleUrls = [
                        './esposa/',
                        './esposa/index.html',
                        'esposa/',
                        'esposa/index.html'
                    ];
                } else {
                    // Para outros links, usa o href original
                    possibleUrls = [originalHref];
                }
                
                const newHref = buildUrlWithUTMs(possibleUrls[0]);
                $link.attr('href', newHref);
                $link.data('utm-processed', true);
                
                console.log(`‚úÖ UTMs aplicados no bot√£o: ${originalHref} ‚Üí ${newHref}`);
            }
        });
    }

    // ===== FIM - GERENCIAMENTO DE UTMs CORRIGIDO =====

    // Vari√°veis globais
    let randomChangeInterval;
    const userLocation = 'Brasil';
    const initialBackRedirectUrl = 'https://descubra-tudospy.online/back-r-passo1/';

    // Fun√ß√£o para configurar o URL de redirecionamento din√¢mico - CORRIGIDA
    let urlBackRedirect = initialBackRedirectUrl;
    const setBackRedirect = (newUrl) => {
        urlBackRedirect = buildUrlWithUTMs(newUrl.trim());

        // Reinicia a l√≥gica de manipula√ß√£o de hist√≥rico ap√≥s a atualiza√ß√£o
        history.replaceState({}, "", location.href);
        history.pushState({}, "", location.href);
    };

    // Configura o redirecionamento inicial
    setBackRedirect(initialBackRedirectUrl);

    // L√≥gica de back redirect
    window.onpopstate = function () {
        setTimeout(function () {
            location.href = urlBackRedirect;
        }, 1);
    };

    const texts = [
        'Conectando ao servidor do WhatsApp...',
        'Simulando IP na regi√£o de ' + userLocation + '...',
        'Ignorando o firewall...',
        'Injetando consultas SQL...',
        'Buscando informa√ß√µes de {phone}...',
        'Quebrando senha...',
        'Autenticando como {phone}...',
        'Acesso concedido, redirecionando para o servidor solicitado...'
    ];

    // Fun√ß√µes principais
    function updateTextRotation(phone) {
        let index = 0;
        const totalStages = texts.length;
        const textElement = $('.text_ramdom');
        const progressBar = $('.progress-bar');

        const interval = setInterval(() => {
            if (index >= totalStages) {
                clearInterval(interval);

                // Insere o v√≠deo quando part-3 √© exibida
                insertVturbVideo();

                // Exibir part-3 ap√≥s o progresso
                switchSections('.part-1', '.part-3');

                startRandomValuesInsertion();

                // Fechar o modal ap√≥s um pequeno delay para a transi√ß√£o
                setTimeout(() => {
                    $('#investigationModal').modal('hide');
                    startAnalysisProgressBar(); // Iniciar o progresso da barra na part-3
                }, 500);

                return;
            }

            // Atualiza o texto e a cor
            const currentText = texts[index].replace('{phone}', phone);
            setTextColor(textElement, currentText);

            // Atualiza a barra de progresso
            updateProgressBar(progressBar, index, totalStages);
            index++;
        }, 3000);
    }

    function setTextColor(element, text) {
        element.text(text).css('color', 'black');
        setTimeout(() => element.css('color', 'green'), 1000);
    }

    function updateProgressBar(progressBar, stage, totalStages) {
        const percentage = ((stage + 1) / totalStages) * 100;
        progressBar.css('width', percentage + '%')
            .attr('aria-valuenow', percentage)
            .text(percentage + '%');
    }

    // Fun√ß√£o para iniciar a barra de progresso na part-3
    function startAnalysisProgressBar(totalTimeInSeconds = 368) {
        let width = 0;
        const progressBar = $('.progress_analysct_number .progress-bar');

        // Reinicia a barra de progresso para 0%
        progressBar.css('width', '0%')
            .attr('aria-valuenow', 0)
            .text('0%');

        // Calcula o intervalo com base no tempo total fornecido
        const intervalTime = (totalTimeInSeconds * 1000) / 100;

        const interval = setInterval(() => {
            if (width >= 100) {
                clearInterval(interval);
                setTimeout(handleFinalState, 3000);
            } else {
                width++;
                progressBar.css('width', width + '%')
                    .attr('aria-valuenow', width)
                    .text(width + '%');
            }
        }, intervalTime);
    }

    // Fun√ß√£o handleFinalState CORRIGIDA com m√∫ltiplas op√ß√µes de redirecionamento
    function handleFinalState() {
        const savedProfilePic = $.cookie('profilePic');
        const aboutText = $.cookie('about') || '';
        const descriptionText = $.cookie('description') || '';

        const verifyButton = $('<button>', {
            class: 'btn btn-primary w-100 mt-3 mb-3',
            text: 'Verificar Resultado'
        });

        $('#verifyButtonContainer').html(verifyButton);

        verifyButton.on('click', function () {
            console.log('üîÑ Bot√£o "Verificar Resultado" clicado');
            
            // Debug: verificar UTMs antes do redirecionamento
            const currentUtms = getUTMParams();
            console.log('üìä UTMs dispon√≠veis para redirecionamento:', currentUtms);
            
            if (savedProfilePic) {
                // M√∫ltiplas op√ß√µes de URL para garantir que funcione
                const possibleUrls = [
                    './concluido/',           // Op√ß√£o 1: com barra final
                    './concluido/index.html', // Op√ß√£o 2: com index.html expl√≠cito
                    'concluido/',             // Op√ß√£o 3: sem ponto inicial
                    'concluido/index.html'    // Op√ß√£o 4: sem ponto inicial + index.html
                ];
                
                // Tenta a primeira op√ß√£o com UTMs
                const redirectUrl = buildUrlWithUTMs(possibleUrls[0]);
                console.log('üéØ Redirecionando para:', redirectUrl);
                
                // Adiciona um pequeno delay para garantir que os logs sejam vis√≠veis
                setTimeout(() => {
                    window.location.href = redirectUrl;
                }, 100);
                
            } else {
                console.log('‚ö†Ô∏è Nenhuma foto de perfil encontrada, mostrando se√ß√£o NotImg');
                $('.NotImg').show();
                $('.part-3').hide();
                $('.withImg').hide();
                
                // Aplica UTMs nos bot√µes da se√ß√£o NotImg ap√≥s mostrar a se√ß√£o
                setTimeout(() => {
                    applyUTMsToNotImgButtons();
                }, 100);
            }
        });

        if (savedProfilePic) {
            $('.profile_picture').attr('src', savedProfilePic).show();
            $('.withImg').hide();
            $('.NotImg').hide();
            updateProfileInfo(aboutText, descriptionText);
        } else {
            $('.profile_picture').hide();
            $('.withImg').hide();
            $('.NotImg').hide();
        }
    }

    function updateProfileInfo(nameProfile, about, description) {
        // Obt√©m o telefone original direto do input
        const originalPhone = $('#phone').val();

        // Atualiza ou oculta o nome do perfil
        if (nameProfile) {
            $('.name-profile-text').html('<b>Nome no Whatsapp:</b> ' + nameProfile).show();
        } else {
            $('.name-profile-text').hide();
        }

        // Atualiza ou oculta o bio (about)
        if (about) {
            $('.bio-text').html('<b>Bio:</b> ' + about).show();
        } else {
            $('.bio-text').hide();
        }

        // Atualiza ou oculta a descri√ß√£o (business description)
        if (description) {
            $('.description-text').html('<b>Descri√ß√£o:</b> ' + description).show();
        } else {
            $('.description-text').hide();
        }

        // Atualiza o telefone original
        if (originalPhone && originalPhone.trim() !== '') {
            $('.phone-number').html('<b>Telefone:</b> ' + originalPhone).show();
        } else {
            $('.phone-number').hide();
        }
    }

    function switchSections(hideSelector, showSelector) {
        $(hideSelector).hide();
        $(showSelector).show();
    }

    function isValidPhone(phone) {
        const regex = /^\(\d{2}\) \d{5}-\d{4}$/;
        return regex.test(phone);
    }

    function formatPhone(phone) {
        return '55' + phone.replace(/\D/g, '');
    }

    function fetchProfileImage(phone) {
        const formattedPhone = formatPhone(phone);
        $.ajax({
            url: 'https://api-spyzap-git-main-tie-marketings-projects.vercel.app/api/fetch_img.js',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ phone: formattedPhone }),
            success: (response) => handleAPISuccess(response, phone),
            error: (xhr, status, error) => console.error("Erro na requisi√ß√£o √† API:", status, error)
        });
    }

    function handleAPISuccess(response) {
        try {
            const jsonResponse = typeof response === "string" ? JSON.parse(response) : response;
            console.log('Resposta completa da API:', jsonResponse);
            if (jsonResponse) {
                const profilePic = jsonResponse.profilePic || '';
                const about = jsonResponse.about || '';
                const businessDescription = jsonResponse.businessProfile?.description || '';
                const nameProfile = jsonResponse.name || 'Desconhecido';
                console.log('URL da imagem retornada:', profilePic);

                // Salva as informa√ß√µes nos cookies
                $.cookie('profilePic', profilePic, { expires: 7, path: '/' });
                $.cookie('about', about, { expires: 7, path: '/' });
                $.cookie('description', businessDescription, { expires: 7, path: '/' });

                $('.profile_picture').attr('src', profilePic).show();
                updateProfileInfo(nameProfile, about, businessDescription);
                console.log("Informa√ß√µes salvas nos cookies e exibidas.");
            } else {
                console.error("Resposta da API est√° faltando campos.");
                $('.profile_picture').hide();
            }
        } catch (e) {
            console.error("Erro ao processar a resposta JSON:", e);
            $('.profile_picture').hide();
        }
    }

    // Eventos
    $('#btn-save').on('click', function () {
        const phone = $('#phone').val();
        if (!isValidPhone(phone)) {
            alert("N√∫mero de telefone inv√°lido. Por favor, corrija o n√∫mero e tente novamente.");
            return;
        }

        $.cookie('phone_number', phone, { expires: 7, path: '/' });

        // Altera o URL de redirecionamento ap√≥s o submit do script 1
        setBackRedirect('https://espiaoinvisivel.com/v5/back');

        // Abra o modal
        $('#investigationModal').modal({
            backdrop: 'static',
            keyboard: false
        }).modal('show');

        // Exibe a part-2 dentro do modal
        $('#investigationModal .part-2').show();

        updateTextRotation(phone);
        fetchProfileImage(phone);

        // Parar a fun√ß√£o de mudan√ßa de perfil aleat√≥ria quando part-1 √© ocultada
        clearInterval(randomChangeInterval);
    });

    // M√°scaras de telefone e outros eventos
    $('.input-phone').mask('(00) 00000-0000', { placeholder: "(11) 90000-0000" });
    $('#card_funciona').on('click', function () {
        $('#hiddenContent').slideToggle(300);
        $(this).find('.toggleArrow').toggleClass('fa-chevron-down fa-chevron-up');
    });

    // Verifica√ß√£o de URL espec√≠fica
    $(document).ready(function () {
        if (window.location.href.indexOf("espiaoinvisivel") === -1) {
            $("html").css("font-size", "20px");

            $("link[rel='stylesheet']").each(function () {
                var href = $(this).attr("href");
                if (href && href.indexOf("style.css") !== -1) {
                    var newHref = href.replace("style.css", "style.css");
                    $(this).attr("href", newHref);
                }
            });
        }
    });

    // Fun√ß√£o de mudan√ßa de perfis fict√≠cios
    function startRandomChange() {
        const phoneNumbers = ["+55 21 98371-****", "+55 95 98765-****", "+55 88 99823-****", "+55 11 91234-****", "+55 32 99876-****"];
        const profilePics = ["assets/img/profile2.png", "assets/img/profile24.png", "assets/img/profile1.png", "assets/img/profile3.png", "assets/img/profile4.png"];

        randomChangeInterval = setInterval(() => {
            $('.phone-item').each(function () {
                const randomPhone = phoneNumbers[Math.floor(Math.random() * phoneNumbers.length)];
                const randomPic = profilePics[Math.floor(Math.random() * profilePics.length)];
                const $img = $(this).find('.profile-pic');
                const $phone = $(this).find('.phone-number');

                $img.css('opacity', '0');
                $phone.css('opacity', '0');
                setTimeout(() => {
                    $img.attr('src', randomPic).css('opacity', '1');
                    $phone.text(randomPhone).css('opacity', '1');
                }, 1000);
            });
        }, Math.random() * (9000 - 3000) + 3000);
    }

    // Event listener CORRIGIDO para todos os links
    $(document).on('click', 'a', function (e) {
        const link = $(this);
        const href = link.attr('href');

        // Pular links especiais
        if (!href || href.startsWith('#') || href.startsWith('javascript:') || href.startsWith('http')) {
            return;
        }

        e.preventDefault();
        const newUrl = buildUrlWithUTMs(href);
        console.log('üîó Link clicado, redirecionando para:', newUrl);
        window.location.href = newUrl;
    });

    // Event listeners espec√≠ficos para os bot√µes da se√ß√£o NotImg
    $(document).on('click', '.NotImg a[href*="marido"], .NotImg a[href*="esposa"]', function(e) {
        e.preventDefault();
        
        const $link = $(this);
        const originalHref = $link.attr('href');
        
        console.log('üë´ Bot√£o da se√ß√£o NotImg clicado:', originalHref);
        
        // Determina as op√ß√µes de URL baseado no href
        let possibleUrls = [];
        
        if (originalHref.includes('marido')) {
            possibleUrls = [
                './marido/',
                './marido/index.html',
                'marido/',
                'marido/index.html'
            ];
            console.log('üë® Redirecionando para se√ß√£o Marido');
        } else if (originalHref.includes('esposa')) {
            possibleUrls = [
                './esposa/',
                './esposa/index.html',
                'esposa/',
                'esposa/index.html'
            ];
            console.log('üë© Redirecionando para se√ß√£o Esposa');
        }
        
        if (possibleUrls.length > 0) {
            const finalUrl = buildUrlWithUTMs(possibleUrls[0]);
            console.log('üéØ URL final com UTMs:', finalUrl);
            
            // Pequeno delay para garantir que os logs apare√ßam
            setTimeout(() => {
                window.location.href = finalUrl;
            }, 100);
        }
    });

    // Event listener CORRIGIDO para o bot√£o "descobrir a verdade"
    $(document).on('click', '#descobrir-verdade', function (e) {
        e.preventDefault();
        console.log('üîç Bot√£o "descobrir verdade" clicado');
        
        // M√∫ltiplas op√ß√µes de URL para o bot√£o descobrir verdade
        const possibleUrls = [
            './concluido/',
            './concluido/index.html',
            'concluido/',
            'concluido/index.html'
        ];
        
        const redirectUrl = buildUrlWithUTMs(possibleUrls[0]);
        console.log('üéØ Redirecionando para:', redirectUrl);
        window.location.href = redirectUrl;
    });

    // Observa quando a se√ß√£o NotImg fica vis√≠vel e aplica UTMs
    const notImgObserver = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
                const $notImg = $('.NotImg');
                
                // Verifica se a se√ß√£o ficou vis√≠vel
                if ($notImg.is(':visible') && !$notImg.data('utms-applied')) {
                    console.log('üëÅÔ∏è Se√ß√£o NotImg ficou vis√≠vel, aplicando UTMs nos bot√µes');
                    applyUTMsToNotImgButtons();
                    $notImg.data('utms-applied', true);
                }
            }
        });
    });
    
    // Inicia a observa√ß√£o da se√ß√£o NotImg
    const notImgElement = document.querySelector('.NotImg');
    if (notImgElement) {
        notImgObserver.observe(notImgElement, {
            attributes: true,
            attributeFilter: ['style']
        });
    }
    
    // Tamb√©m aplica UTMs imediatamente se a se√ß√£o j√° estiver vis√≠vel
    if ($('.NotImg').is(':visible')) {
        applyUTMsToNotImgButtons();
    }

    // Inicia a fun√ß√£o de mudan√ßa de perfis fict√≠cios
    startRandomChange();

    // ===== FUN√á√ïES AUXILIARES GLOBAIS =====
    
    // Disponibilizar fun√ß√µes importantes no escopo global para uso externo
    window.getUTMParams = getUTMParams;
    window.buildUrlWithUTMs = buildUrlWithUTMs;
    window.captureAndSaveUTMs = captureAndSaveUTMs;
    
    // Fun√ß√£o de debug para testar UTMs
    window.debugUTMs = function() {
        console.log('=== DEBUG UTMs ===');
        console.log('URL atual:', window.location.href);
        console.log('UTMs na URL:', new URLSearchParams(window.location.search));
        console.log('UTMs no localStorage:', localStorage.getItem('utmParams'));
        console.log('UTMs capturados:', getUTMParams());
        console.log('==================');
    };
});

// ===== FUN√á√ïES GLOBAIS CORRIGIDAS =====

// Fun√ß√£o setBackRedirect global CORRIGIDA - agora usa as fun√ß√µes unificadas
function setBackRedirect(newUrl) {
    // Usar a fun√ß√£o global buildUrlWithUTMs se dispon√≠vel, sen√£o usar implementa√ß√£o local
    if (typeof window.buildUrlWithUTMs === 'function') {
        urlBackRedirect = window.buildUrlWithUTMs(newUrl.trim());
    } else {
        // Fallback para implementa√ß√£o local (caso seja chamada antes do document.ready)
        const utmParams = getUTMParamsLocal();
        if (Object.keys(utmParams).length === 0) {
            urlBackRedirect = newUrl.trim();
        } else {
            const utmString = Object.keys(utmParams)
                .map(key => `${key}=${encodeURIComponent(utmParams[key])}`)
                .join('&');
            const separator = newUrl.includes('?') ? '&' : '?';
            urlBackRedirect = `${newUrl.trim()}${separator}${utmString}`;
        }
    }
    
    history.replaceState({}, "", location.href);
    history.pushState({}, "", location.href);
}

// Fun√ß√£o auxiliar local para fallback
function getUTMParamsLocal() {
    const storedUtms = localStorage.getItem('utmParams');
    if (storedUtms) {
        try {
            return JSON.parse(storedUtms);
        } catch (e) {
            console.error('Erro ao parsear UTMs:', e);
        }
    }
    return {};
}

// Fun√ß√£o para gerar um n√∫mero aleat√≥rio entre um m√≠nimo e m√°ximo
function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Fun√ß√£o para gerar um n√∫mero decimal aleat√≥rio entre um m√≠nimo e m√°ximo
function getRandomFloat(min, max) {
    return (Math.random() * (max - min) + min).toFixed(1);
}

// Fun√ß√£o para inserir valores aleat√≥rios nos elementos
function startRandomValuesInsertion() {
    const elements = ['.ramdom-1', '.ramdom-2', '.ramdom-3'];
    
    elements.forEach(selector => {
        const element = $(selector);
        if (element.length) {
            const randomValue = getRandomInt(1, 50);
            element.text(randomValue);
        }
    });
}

function insertVturbVideo() {
    const videoHTML = `
        <div id="vid_67f740d8bd70134c0bdd0613" style="position: relative; width: 100%; padding: 56.25% 0 0;"> 
            <img id="thumb_67f740d8bd70134c0bdd0613" src="https://images.converteai.net/9581cd38-0dee-4366-bfd7-eeb983591eda/players/67f740d8bd70134c0bdd0613/thumbnail.jpg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; display: block;" alt="thumbnail"> 
            <div id="backdrop_67f740d8bd70134c0bdd0613" style=" -webkit-backdrop-filter: blur(5px); backdrop-filter: blur(5px); position: absolute; top: 0; height: 100%; width: 100%; "></div> 
        </div> 
        <script type="text/javascript" id="scr_67f740d8bd70134c0bdd0613"> 
            var s=document.createElement("script"); 
            s.src="https://scripts.converteai.net/9581cd38-0dee-4366-bfd7-eeb983591eda/players/67f740d8bd70134c0bdd0613/player.js", 
            s.async=!0,document.head.appendChild(s); 
        </script>
    `;

    $('#vsl').html(videoHTML);
}

// Data atualiza√ß√£o
var getdayNames = new Array("Domingo", "Segunda-Feira", "Ter√ßa-Feira", "Quarta-Feira", "Quinta-Feira", "Sexta-Feira", "S√°bado");
var getdayMonth = new Array("Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro");
var getNow = new Date();
var dayOfTheWeek = getNow.getDay();
getNow.setTime(getNow.getTime() - 0 * 24 * 60 * 60 * 1000);
var value = getdayNames[(getNow.getDay())] + ", " + getNow.getDate() + " de " + getdayMonth[(getNow.getMonth())] + " " + " de " + getNow.getFullYear();
$(".descounttime").html(value);

